/* Automatically generated by shapeshifter. Do not modify! */
/* eslint-disable */

import ArrayDefault from '../stub';
import DefaultName from '../stub';
import AnotherDefault, { Baz, Qux } from '../stub';
import InstanceDefault, { InstanceClassName } from '../stub';
import ObjectDefault from '../stub';
import ShapeDefault, { ShapeClassName } from '../stub';
import UnionDefault, { UnionClassName } from '../stub';

export const ARRAY_NUM = 123;
export const CONST_STRING = 'string';
export const STATUS_NUMBER = 123;
export const MAGIC_FLOAT = 456.78;
export const IS_ENABLED = true;
export const EMPTY_VALUE = null;
export const PRIMITIVE_LIST = ['foo', 123, 456.78, false];
export const INST_STR = 'foobar';
export const INST_ENABLED = true;
export const PRIMITIVE_VALUES = ['string', 123, true];
export const PRIMITIVE_STR = 'primitive';

export enum ArrayEnumFieldEnum {
  foo,
  bar,
  baz
}

export enum ArrayUnionField1Enum {
  A = 1,
  B = 2,
  C = 3
}

export enum EnumBoolFieldEnum {
  A = 1,
  B = 0
}

export enum EnumBooleanFieldEnum {
  A = 0,
  B = 1
}

export enum EnumIntFieldEnum {
  A = 123
}

export enum EnumIntegerFieldEnum {
  A = 1,
  B = 2,
  C = 3
}

export enum EnumNumFieldEnum {
  A = 123,
  B = 456,
  C = 789
}

export enum EnumNumberFieldEnum {
  A = 1,
  B = 2,
  C = 3,
  D = 4,
  E = 5,
  F = 6,
  G = 7,
  H = 8,
  I = 9,
  J = 10
}

export enum EnumFloatFieldEnum {
  A = 12.34,
  B = 56.78,
  C = 9,
  D = 65.4
}

export enum EnumStrFieldEnum {
  foo,
  bar
}

export enum EnumStringFieldEnum {
  baz,
  qux
}

export enum ObjectEnumFieldValueEnum {
  foo,
  bar,
  baz
}

export type Key = string | number;

export enum ShapeStringEnumEnum {
  foo,
  bar,
  baz
}

export enum ShapeIntEnumEnum {
  A = 1,
  B = 2,
  C = 3
}

export enum ShapeEnumEnum {
  A = 123,
  B = 456,
  C = 789
}

export enum UnionEnumField0Enum {
  foo,
  bar,
  baz
}

export enum UnionEnumField1Enum {
  A = 789,
  B = 456,
  C = 123
}

export enum UnionUnionField01Enum {
  A = 1,
  B = 2,
  C = 3
}

export interface ArrayInterface {
  arrayField?: Array<Array<string>>;
  boolField?: Array<boolean>;
  enumField?: Array<ArrayEnumFieldEnum>;
  instanceField?: Array<ArrayDefault>;
  numberField?: Array<number> | null;
  objectField?: Array<{ [key: string]: number }>;
  shapeField?: Array<{
    foo?: string;
    bar?: boolean;
  }>;
  stringField?: Array<string>;
  unionField?: Array<string | ArrayUnionField1Enum>;
}

export interface ConstantsInterface {
  numberField?: number;
}

export interface EnumInterface {
  boolField?: EnumBoolFieldEnum;
  booleanField?: EnumBooleanFieldEnum;
  intField: EnumIntFieldEnum;
  integerField?: EnumIntegerFieldEnum;
  numField?: EnumNumFieldEnum;
  numberField?: EnumNumberFieldEnum;
  floatField?: EnumFloatFieldEnum;
  strField?: EnumStrFieldEnum;
  stringField?: EnumStringFieldEnum;
}

export interface ImportsInterface {
  stringField?: string;
}

export interface InstanceInterface {
  instField?: InstanceClassName;
  instanceField?: InstanceDefault | null;
}

export interface ObjectInterface {
  arrayField?: { [key: string]: Array<string> };
  boolField?: { [key: string]: boolean } | null;
  enumField?: { [key: string]: ObjectEnumFieldValueEnum } | null;
  instanceField?: { [key: string]: ObjectDefault };
  numberField?: { [key: string]: number };
  objectField?: { [key: string]: { [key: string]: number } };
  shapeField?: { [key: string]: {
    foo?: string;
    bar?: boolean;
  } };
  stringField?: { [key: string]: string };
  unionField?: { [key: string]: number | Array<string> };
  objShorthandField?: { [key: string]: string };
  objKeyTypeField?: { [key: number]: string };
}

export interface PolymorphVideoInterface {
  path?: string;
}

export interface PolymorphImageInterface {
  url?: string;
}

export interface PolymorphInterface {
  item?: PolymorphImageInterface | PolymorphVideoInterface;
  item_id?: Key;
  item_type?: string;
  product?: PolymorphImageInterface | PolymorphVideoInterface;
  product_key?: Key;
  product_model?: string;
}

export interface PrimitiveInterface {
  boolField?: boolean;
  boolFieldExpanded?: boolean | null;
  booleanField?: boolean;
  booleanFieldExpanded?: boolean | null;
  intField?: number;
  intFieldExpanded?: number | null;
  integerField?: number;
  integerFieldExpanded?: number | null;
  numField?: number;
  numFieldExpanded?: number | null;
  numberField?: number;
  numberFieldExpanded?: number | null;
  floatField?: number;
  floatFieldExpanded?: number | null;
  strField?: string;
  strFieldExpanded?: string | null;
  stringField?: string;
  stringFieldExpanded?: string | null;
}

export interface ReferenceBarInterface {
  boolField?: boolean;
}

export interface ReferenceFooInterface {
  numberField?: number;
  refField?: ReferenceBarInterface | null;
}

export interface ReferenceSelfBasicInterface {
  stringField?: string;
}

export interface ReferenceSelfInterface {
  stringField?: string;
  referenceField?: ReferenceSelfInterface;
  requiredRefField?: ReferenceSelfInterface | null;
  subsetRefField: Array<ReferenceSelfBasicInterface>;
}

export interface ReferenceSetOnlyStringInterface {
  stringField?: string;
}

export interface ReferenceSetInterface {
  boolField?: boolean;
  stringField?: string;
  numberField?: number;
}

export interface ReferenceInterface {
  stringField?: string;
  refField?: ReferenceFooInterface | null;
  referenceField?: ReferenceFooInterface;
  subsetRefField?: ReferenceSetOnlyStringInterface;
}

export interface SetsBasicInterface {
  foo?: string;
  baz?: boolean | null;
}

export interface SetsWithNullInterface {
  foo?: string;
  qux?: string | null;
}

export interface SetsInterface {
  foo?: string;
  bar?: number;
  baz?: boolean | null;
  qux?: string | null;
}

export interface ShapeReferencePriceInterface {
  amount?: number;
  nativeAmount?: number;
  exchangeRate?: number;
}

export interface ShapeReferenceInterface {
  fees?: ShapeReferencePriceInterface;
  taxes?: ShapeReferencePriceInterface | null;
  total?: ShapeReferencePriceInterface | null;
}

export interface ShapeInterface {
  structAlias?: {
    foo?: string;
  };
  primitiveFields?: {
    string?: string;
    bool?: boolean | null;
    number?: number | null;
  };
  arrayFields?: {
    numberArray?: Array<number>;
    stringArray?: Array<string>;
    shapeArray?: Array<{
      foo?: string;
    }>;
  };
  enumFields?: {
    stringEnum?: ShapeStringEnumEnum;
    intEnum?: ShapeIntEnumEnum;
  };
  instanceFields?: {
    instOf?: ShapeClassName;
    instanceOf?: ShapeDefault;
  };
  objectFields?: {
    numberObj?: { [key: string]: number };
    boolObject?: { [key: string]: boolean };
    intStringObject?: { [key: number]: string };
    unionObject: { [key: string]: number | string | {
      foo?: string;
    } };
  };
  unionFields?: {
    multiUnion?: number | boolean | ShapeClassName | { [key: string]: string } | {
      string?: string;
      enum?: ShapeEnumEnum;
    };
  };
}

export interface UnionInterface {
  arrayField?: Array<string> | Array<{ [key: string]: string }>;
  primitiveFields?: boolean | number;
  enumField?: UnionEnumField0Enum | UnionEnumField1Enum;
  instanceField?: UnionClassName | UnionDefault;
  objectField?: { [key: string]: number } | { [key: string]: Array<string> };
  shapeField?: {
    foo?: string;
    bar?: boolean;
  } | {
    qux?: string | boolean;
  };
  unionField?: string | UnionUnionField01Enum | boolean | number;
}
