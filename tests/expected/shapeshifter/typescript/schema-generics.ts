/* Automatically generated by shapeshifter. Do not modify! */
/* eslint-disable */

import Schema from 'shapeshifter';

export type Key = string | number;

export const multipleChildrenSchema = new Schema<MultipleChildrenInterface>('multiple-children', 'uuid');

export const singleChildSchema = new Schema<SingleChildInterface>('single-child');

export const parentSchema = new Schema<ParentInterface>('parents');

singleChildSchema
  .hasOne({
    self: singleChildSchema,
  });

parentSchema
  .morphTo({
    Single: singleChildSchema,
    'Model::Multiple': multipleChildrenSchema,
  }, 'polymorph', '_type', '_fk')
  .belongsToMany({
    children: multipleChildrenSchema,
  })
  .hasOne({
    orphan: singleChildSchema,
  });

export interface MultipleChildrenInterface {
  uuid?: string;
}

export interface SingleChildInterface {
  id?: number;
  active?: boolean;
  self?: SingleChildInterface;
}

export interface ParentInterface {
  id?: number;
  name?: string;
  children?: Array<MultipleChildrenInterface>;
  orphan?: SingleChildInterface;
  polymorph?: SingleChildInterface | MultipleChildrenInterface;
  polymorph_fk?: Key;
  polymorph_type?: string;
}
