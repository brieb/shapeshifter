/* Automatically generated by shapeshifter. Do not modify! */
/* eslint-disable */

import ShapeDefault, { ShapeClassName } from '../stub';

export enum ShapeStringEnumEnum {
  foo,
  bar,
  baz
}

export enum ShapeIntEnumEnum {
  A = 1,
  B = 2,
  C = 3
}

export enum ShapeEnumEnum {
  A = 123,
  B = 456,
  C = 789
}

export interface ShapeInterface {
  structAlias: {
    foo: string | null;
  } | null;
  primitiveFields: {
    string: string | null;
    bool: boolean;
    number: number;
  } | null;
  arrayFields: {
    numberArray: Array<number | null> | null;
    stringArray: Array<string | null> | null;
    shapeArray: Array<{
      foo: string | null;
    } | null> | null;
  } | null;
  enumFields: {
    stringEnum: ShapeStringEnumEnum | null;
    intEnum: ShapeIntEnumEnum | null;
  } | null;
  instanceFields: {
    instOf: ShapeClassName | null;
    instanceOf: ShapeDefault | null;
  } | null;
  objectFields: {
    numberObj: { [key: string]: number | null } | null;
    boolObject: { [key: string]: boolean | null } | null;
    intStringObject: { [key: number]: string | null } | null;
    unionObject: { [key: string]: number | string | {
      foo: string | null;
    } | null } | null;
  } | null;
  unionFields: {
    multiUnion: number | boolean | ShapeClassName | { [key: string]: string | null } | {
      string: string | null;
      enum: ShapeEnumEnum | null;
    } | null;
  } | null;
}
